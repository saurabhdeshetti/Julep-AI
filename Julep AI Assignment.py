# -*- coding: utf-8 -*-
"""Saurabh Deshetti - Julep AI - Assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cM47YMu7szYScTnkTa3sksZOoYNhv2lC
"""

pip install julep

from julep import Julep
import time
import yaml

client = Julep(api_key="eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIwNzg1YTZiOS1jMDNlLTUwMTAtOGYyNC1mMTk0OWMxY2YwNmEiLCJlbWFpbCI6InNhdXJhYmhkZXNoZXR0aUBnbWFpbC5jb20iLCJpYXQiOjE3NDkzOTQyNzEsImV4cCI6MTc0OTk5OTA3MX0.wfkze-ZhcyyQHESr6mT7smbsh3SYJW2WuesLOG8lFtSqORrDaCJ_3ZnQQ1UdXqFhXz9QlxH2CqufIh4pAOA9Dw")

agent = client.agents.create(name="Foodie Tour Agent", model="claude-3.5-sonnet", about="Suggests foodie tours based on weather and local cuisine.")

task_definition = {
    "name": "Foodie Tour Task",
    "description": "For a list of cities, suggests a foodie tour based on weather and local cuisine.",
    "input_schema": {
        "type": "object",
        "properties": {
            "cities": {
                "type": "array",
                "items": {"type": "string"},
                "description": "List of city names to process"
            }
        }
    },
    "main": [
        {
            "prompt": [
                {
                    "role": "system",
                    "content": "You are a travel and food expert assistant."
                },
                {
                    "role": "user",
                    "content": "For each of these cities: {steps[0].input.cities}\nFor each city:\n1. Check today's weather and suggest whether indoor or outdoor dining is better.\n2. List 3 iconic local dishes.\n3. Suggest top-rated restaurants for each dish.\n4. Create a one-day foodie tour (breakfast, lunch, and dinner), assigning each dish to a meal. Write a fun, engaging narrative for the tour, factoring in the weather."
                }
            ]
        }
    ]
}

task = client.tasks.create(agent_id=agent.id, **task_definition)

execution = client.executions.create(
    task_id= "06845a28-ea1e-7e56-8000-848af246d2fe",
    input={"cities": ["Mumbai", "Paris", "Tokyo"]}
)

# Wait for the task to finish
while (result := client.executions.get(execution.id)).status not in ['succeeded', 'failed']:
    print("Working...")
    time.sleep(1)

if result.status == "succeeded":
    print(result.output)
else:
    print(f"Error: {result.error}")